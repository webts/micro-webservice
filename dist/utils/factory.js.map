{"version":3,"sources":["../../lib/utils/factory.js"],"names":["module","exports","buildService","config","console","log","serviceClass","clazz","endsWith","indexOf","startsWith","resolve","require","parts","split","__dirname","default","npm","length","i","error","Error","instance","err"],"mappings":";;AAAA;;AACA;;;;AAEA;;;;;AAKAA,OAAOC,OAAP,CAAeC,YAAf,GAA8B,gBAAeC,MAAf,EAAsB;AAChDC,UAAQC,GAAR,CAAYF,MAAZ;AACA,MAAIG,eAAeH,OAAOG,YAA1B;AACA,MAAIC,QAAQ,IAAZ;;AACA,MAAG;AACC;AACA,QAAGD,aAAaE,QAAb,CAAsB,KAAtB,KAAgCF,aAAaG,OAAb,CAAqB,GAArB,IAA4B,CAA/D,EAAiE;AAC7D,UAAGH,aAAaI,UAAb,CAAwB,IAAxB,CAAH,EACIJ,eAAe,cAAKK,OAAL,CAAa,SAAb,EAAwBL,YAAxB,CAAf;AACJC,cAAQK,QAAQN,YAAR,CAAR;AACH,KAJD,MAKK,IAAGA,aAAaG,OAAb,CAAqB,GAArB,IAA4B,CAA/B,EAAiC;AAClC,YAAMI,QAAQP,aAAaQ,KAAb,CAAmB,GAAnB,CAAd;;AAEA,UAAGD,MAAM,CAAN,MAAa,kBAAhB,EAAmC;AACnC;AACIT,kBAAQC,GAAR,CAAYU,YAAY,WAAZ,GAA0BF,MAAM,CAAN,CAAtC;AACAN,kBAAQK,QAAQ,aAAaC,MAAM,CAAN,CAArB,EAA+BG,OAAvC,CAFJ,CAGI;AACH,SALD,MAMI;AACA,cAAMC,MAAML,QAAQC,MAAM,CAAN,CAAR,CAAZ;;AACA,YAAGA,MAAMK,MAAN,GAAe,CAAlB,EAAoB;AAChBX,kBAAQU,GAAR;;AACA,eAAI,IAAIE,IAAE,CAAV,EAAYA,IAAIN,MAAMK,MAAtB,EAA8BC,GAA9B,EAAkC;AAC9BZ,oBAAQA,MAAMM,MAAMM,CAAN,CAAN,CAAR;AACH;AACJ,SALD,MAKK;AACDf,kBAAQgB,KAAR,CAAc,IAAIC,KAAJ,CAAU,yBAAV,CAAd;AAEA,iBAAO,IAAP;AACH;AACJ;AACJ,KAtBI,MAuBD;AACAd,cAAQK,QAAQN,YAAR,CAAR;AACH;;AAED,UAAMgB,WAAW,IAAIf,KAAJ,CAAUJ,MAAV,CAAjB;AAEA,WAAOmB,QAAP;AACH,GArCD,CAsCA,OAAMC,GAAN,EAAU;AACNnB,YAAQgB,KAAR,CAAcG,GAAd;AACH;;AAED,SAAO,IAAP;AACH,CA/CD","file":"factory.js","sourcesContent":["import path from 'path';\r\nimport debug from 'debug';\r\n\r\n/**\r\n * create service from serveless yaml config file\r\n * \r\n * @param {any} path \r\n */\r\nmodule.exports.buildService = async function(config){\r\n    console.log(config)\r\n    let serviceClass = config.serviceClass;\r\n    let clazz = null;\r\n    try{\r\n        //load directly from path\r\n        if(serviceClass.endsWith('.js') || serviceClass.indexOf('/') > 0){\r\n            if(serviceClass.startsWith('./'))\r\n                serviceClass = path.resolve('./build', serviceClass);\r\n            clazz = require(serviceClass);\r\n        }\r\n        else if(serviceClass.indexOf('.') > 0){\r\n            const parts = serviceClass.split('.');\r\n            \r\n            if(parts[0] === 'micro-webservice')//this package\r\n            {\r\n                console.log(__dirname + '/../core/' + parts[1])\r\n                clazz = require('../core/' + parts[1]).default;\r\n                //console.log('class ' + clazz);\r\n            }\r\n            else{\r\n                const npm = require(parts[0]);\r\n                if(parts.length > 1){\r\n                    clazz = npm;\r\n                    for(let i=1;i < parts.length; i++){\r\n                        clazz = clazz[parts[i]];\r\n                    }\r\n                }else{\r\n                    console.error(new Error('Invalid class signature'));\r\n\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            clazz = require(serviceClass);\r\n        }\r\n\r\n        const instance = new clazz(config);\r\n\r\n        return instance;\r\n    }\r\n    catch(err){\r\n        console.error(err);\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n"]}