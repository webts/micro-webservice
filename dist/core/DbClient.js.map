{"version":3,"sources":["../../lib/core/DbClient.js"],"names":["DbClient","EventEmitter","constructor","opts","transactionOpts","options","transactionOptions","client","database","bind","begin","end","getConnectionUri","url","username","password","host","port","dbName","authSource","find","query","getById","id","mongo","MongoClient","connect","emit","close"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;AAIe,MAAMA,QAAN,SAAuBC,oBAAvB,CACf;AACIC,cAAYC,IAAZ,EAAkBC,eAAlB,EAAkC;AAC9B;AACA,SAAKC,OAAL,GAAeF,IAAf;AACA,SAAKG,kBAAL,GAA0BF,mBAAmB,EAA7C;AACA,SAAKG,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,GAAL,GAAW,KAAKA,GAAL,CAASF,IAAT,CAAc,IAAd,CAAX;AACH;AAED;;;;;;AAIAG,qBAAkB;AACd,QAAIC,MAAO,aAAY,KAAKR,OAAL,CAAaS,QAAS,IAAG,KAAKT,OAAL,CAAaU,QAAS,IAAG,KAAKV,OAAL,CAAaW,IAAK,IAAI,KAAKX,OAAL,CAAaY,IAAb,IAAqB,KAAM,IAAG,KAAKC,MAAO,EAAzI;;AACA,QAAG,KAAKb,OAAL,CAAac,UAAhB,EAA2B;AACvBN,aAAQ,eAAc,KAAKR,OAAL,CAAac,UAAW,EAA9C;AACH;;AAED,WAAON,GAAP;AACH;;AAED,QAAMO,IAAN,CAAWC,KAAX,EAAiB;AACb,QAAG,KAAKd,MAAR,EAAe;AACX,aAAO,MAAM,KAAKA,MAAL,CAAYa,IAAZ,CAAiBC,KAAjB,CAAb;AACH;;AAED,WAAO,IAAP;AACH;;AAED,QAAMC,OAAN,CAAcC,EAAd,EAAiB;AACb,QAAG,KAAKhB,MAAR,EAAe;AACX,aAAO,MAAO,KAAKA,MAAL,CAAYa,IAAZ,CAAiB;AAACG;AAAD,OAAjB,CAAd;AACH;;AAED,WAAO,IAAP;AACH;;AAEDf,WAASU,MAAT,EAAgB;AACZ,SAAKA,MAAL,GAAcA,MAAd;AACH;AAED;;;;;;;AAKA,QAAMR,KAAN,GAAa;AACT,SAAKH,MAAL,GAAc,MAAMiB,iBAAMC,WAAN,CAAkBC,OAAlB,CAA0B,KAAKd,gBAAL,EAA1B,CAApB;AACA,SAAKe,IAAL,CAAU,eAAV,EAA2B,qBAAqB,KAAKf,gBAAL,EAAhD;AACH;AAED;;;;;;;AAKA,QAAMD,GAAN,GAAW;AACP,UAAM,KAAKJ,MAAL,CAAYqB,KAAZ,EAAN;AAEA,SAAKD,IAAL,CAAU,gBAAV,EAA4B,uBAAuB,KAAKf,gBAAL,EAAnD;AACH;;AA/DL","sourcesContent":["import mongo from 'mongodb';\r\nimport {EventEmitter} from 'events';\r\n\r\n/**\r\n * DB abstraction layer with partial transaction support for\r\n * mongodb\r\n */\r\nexport default class DbClient extends EventEmitter\r\n{\r\n    constructor(opts, transactionOpts){\r\n        super();\r\n        this.options = opts;\r\n        this.transactionOptions = transactionOpts || {};\r\n        this.client = null;\r\n        this.database = this.database.bind(this);\r\n        this.begin = this.begin.bind(this);\r\n        this.end = this.end.bind(this);\r\n    }\r\n\r\n    /**\r\n     * return connection string\r\n     * @return {string}\r\n     */\r\n    getConnectionUri(){\r\n        let url = `mongodb://${this.options.username}:${this.options.password}@${this.options.host}:${ this.options.port || 27301}/${this.dbName}`;\r\n        if(this.options.authSource){\r\n            url += `?authSource=${this.options.authSource}`;\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    async find(query){\r\n        if(this.client){\r\n            return await this.client.find(query);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    async getById(id){\r\n        if(this.client){\r\n            return await  this.client.find({id});\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    database(dbName){\r\n        this.dbName = dbName;\r\n    }\r\n\r\n    /**\r\n     * begin a transaction\r\n     * this will open a connection to db\r\n     * @return {Promise.<DbClient>}\r\n     */\r\n    async begin(){\r\n        this.client = await mongo.MongoClient.connect(this.getConnectionUri());\r\n        this.emit(\"DbClient:Open\", \"Open connection \" + this.getConnectionUri());\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param client {mongo.MongoClient}\r\n     * @return {Promise.<void>}\r\n     */\r\n    async end(){\r\n        await this.client.close();\r\n\r\n        this.emit(\"DbClient:Close\", \"Closed connection \" + this.getConnectionUri());\r\n    }\r\n}"],"file":"DbClient.js"}