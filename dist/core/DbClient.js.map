{"version":3,"sources":["../../lib/core/DbClient.js"],"names":["DbClient","EventEmitter","constructor","opts","transactionOpts","options","transactionOptions","db","connector","database","bind","begin","end","getConnectionUri","url","username","password","host","port","authSource","dbName","mongo","MongoClient","connect","emit","close","client"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;AAIe,MAAMA,QAAN,SAAuBC,oBAAvB,CACf;AACIC,cAAYC,IAAZ,EAAkBC,eAAlB,EAAkC;AAC9B;AACA,SAAKC,OAAL,GAAeF,IAAf;AACA,SAAKG,kBAAL,GAA0BF,mBAAmB,EAA7C;AACA,SAAKG,EAAL,GAAU,IAAV;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,GAAL,GAAW,KAAKA,GAAL,CAASF,IAAT,CAAc,IAAd,CAAX;AACH;AAED;;;;;;AAIAG,qBAAkB;AACd,QAAIC,MAAO,aAAY,KAAKT,OAAL,CAAaU,QAAS,IAAG,KAAKV,OAAL,CAAaW,QAAS,IAAG,KAAKX,OAAL,CAAaY,IAAK,IAAI,KAAKZ,OAAL,CAAaa,IAAb,IAAqB,KAAM,GAA1H;;AACA,QAAG,gBAAgB,KAAKb,OAArB,IAAgC,KAAKA,OAAL,CAAac,UAAb,KAA4B,EAA/D,EAAkE;AAC9DL,aAAQ,eAAc,KAAKT,OAAL,CAAac,UAAW,EAA9C;AACH;;AAED,WAAOL,GAAP;AACH;;AAEDL,WAASW,MAAT,EAAgB;AACZ,SAAKA,MAAL,GAAcA,MAAd;AACH;AAED;;;;;;;AAKA,QAAMT,KAAN,GAAa;AACT,SAAKH,SAAL,GAAiB,MAAMa,iBAAMC,WAAN,CAAkBC,OAAlB,CAA0B,KAAKV,gBAAL,EAA1B,CAAvB;AACA,SAAKN,EAAL,GAAU,KAAKC,SAAL,CAAeD,EAAf,CAAkB,KAAKa,MAAvB,CAAV;AACA,SAAKI,IAAL,CAAU,eAAV,EAA2B,qBAAqB,KAAKX,gBAAL,EAAhD;AACH;AAED;;;;;;;AAKA,QAAMD,GAAN,GAAW;AACP,QAAG,KAAKJ,SAAL,IAAkB,IAArB,EAA2B;AACvB,YAAM,KAAKA,SAAL,CAAeiB,KAAf,EAAN;AACA,WAAKD,IAAL,CAAU,gBAAV,EAA4B,uBAAuB,KAAKX,gBAAL,EAAnD;AACA,WAAKL,SAAL,GAAiB,IAAjB;AACA,WAAKD,EAAL,GAAU,IAAV;AACH;AACJ;;AAED,MAAImB,MAAJ,GAAa;AACT,WAAO,KAAKnB,EAAZ;AACH;;AAxDL","sourcesContent":["import mongo from 'mongodb';\r\nimport {EventEmitter} from 'events';\r\n\r\n/**\r\n * DB abstraction layer with partial transaction support for\r\n * mongodb\r\n */\r\nexport default class DbClient extends EventEmitter\r\n{\r\n    constructor(opts, transactionOpts){\r\n        super();\r\n        this.options = opts;\r\n        this.transactionOptions = transactionOpts || {};\r\n        this.db = null;\r\n        this.connector = null;\r\n        this.database = this.database.bind(this);\r\n        this.begin = this.begin.bind(this);\r\n        this.end = this.end.bind(this);\r\n    }\r\n\r\n    /**\r\n     * return connection string\r\n     * @return {string}\r\n     */\r\n    getConnectionUri(){\r\n        let url = `mongodb://${this.options.username}:${this.options.password}@${this.options.host}:${ this.options.port || 27301}/`;\r\n        if('authSource' in this.options && this.options.authSource !== ''){\r\n            url += `?authSource=${this.options.authSource}`;\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    database(dbName){\r\n        this.dbName = dbName;\r\n    }\r\n\r\n    /**\r\n     * begin a transaction\r\n     * this will open a connection to db\r\n     * @return {Promise.<DbClient>}\r\n     */\r\n    async begin(){\r\n        this.connector = await mongo.MongoClient.connect(this.getConnectionUri());\r\n        this.db = this.connector.db(this.dbName);\r\n        this.emit(\"DbClient:Open\", \"Open connection \" + this.getConnectionUri());\r\n    }\r\n\r\n    /**\r\n     * close the connection\r\n     * @param client {mongo.MongoClient}\r\n     * @return {Promise.<void>}\r\n     */\r\n    async end(){\r\n        if(this.connector != null) {\r\n            await this.connector.close();\r\n            this.emit(\"DbClient:Close\", \"Closed connection \" + this.getConnectionUri());\r\n            this.connector = null;\r\n            this.db = null;\r\n        }\r\n    }\r\n\r\n    get client (){\r\n        return this.db;\r\n    }\r\n}"],"file":"DbClient.js"}