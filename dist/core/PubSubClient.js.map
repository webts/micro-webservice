{"version":3,"sources":["../../lib/core/PubSubClient.js"],"names":["PubSubClient","constructor","opts","url","host","port","options","topics","log","getLogger","bind","logging","client","mqtt","connect","send","subscribe","destroy","onConnect","onMessage","topic","payload","JSON","stringify","publish","end","callback","isConnected","Error","Object","keys","forEach","unsubscribe","err","level","message","stack","meta","from","cb","call","connectedCallback","on","_connected","msg"],"mappings":"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","sourcesContent":["import mqtt from 'async-mqtt';\r\nimport {MqttClient} from 'mqtt';\r\nimport getLogger from './logger';\r\n\r\nexport default class PubSubClient {\r\n    constructor(opts) {\r\n\r\n        \r\n        if(!('url' in opts)){\r\n            opts.url = 'mqtt://' + opts.host + (opts.port ? opts.port :'');\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        this.options = opts;\r\n        /**\r\n         * @private\r\n         * @type {{}}\r\n         */\r\n        this.topics = {};\r\n        /**\r\n         * @private\r\n         */\r\n        this.log    = getLogger.bind({options: this.options.logging})('pubsub');\r\n\r\n        /**\r\n         * @private\r\n         * @class {MqttClient}\r\n         */\r\n        this.client = mqtt.connect(opts.url, opts.options);\r\n        this.send = this.send.bind(this);\r\n        this.subscribe = this.subscribe.bind(this);\r\n        this.destroy = this.destroy.bind(this);\r\n        this.onConnect = this.onConnect.bind(this);\r\n        this.onMessage = this.onMessage.bind(this);\r\n    }\r\n\r\n    async send(topic, payload) {\r\n        if(typeof payload === 'object')\r\n            payload = JSON.stringify(payload);\r\n\r\n        await this.client.publish(topic, payload);\r\n        return this.client.end();\r\n    }\r\n\r\n    subscribe(topic, callback) {\r\n        if (topic in this.topics)\r\n            return true;\r\n\r\n        this.topics[topic] = callback;\r\n        if(this.isConnected)\r\n            this.client.subscribe(topic);\r\n\r\n        throw new Error(\"PubSubClient is not ready\");\r\n    }\r\n\r\n    async destroy() {\r\n        //unsubscribe all topics\r\n        Object.keys(this.topics).forEach(async (topic) => {\r\n            try {\r\n                await this.client.unsubscribe(topic)\r\n            }\r\n            catch (err) {\r\n                this.log.log({\r\n                    level:'error',\r\n                    message: err.stack || err.message,\r\n                    meta:{from: 'PubSubClient'}\r\n                })\r\n            }\r\n        });\r\n\r\n        delete this.topics;\r\n    }\r\n\r\n    onConnect(cb){\r\n        if(this.isConnected)\r\n            cb.call(null);\r\n        else {\r\n            /**\r\n             * @private\r\n             */\r\n            this.connectedCallback = cb;\r\n\r\n            this.client.on('connect', this._connected);\r\n        }\r\n    }\r\n\r\n    onMessage(topic, msg){\r\n        let cb = this.topics[topic];\r\n        if(cb !== null && typeof cb === 'function'){\r\n            cb.call(null, msg);\r\n        }\r\n    }\r\n\r\n    _connected(){\r\n        this.isConnected = true;\r\n        if(this.connectedCallback && typeof this.connectedCallback === 'function'){\r\n            this.connectedCallback.call(null);\r\n            delete this.connectedCallback;\r\n        }\r\n    }\r\n}"],"file":"PubSubClient.js"}