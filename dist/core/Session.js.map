{"version":3,"sources":["../../lib/core/Session.js"],"names":["redis","RedisClient","prototype","Multi","Session","constructor","opts","options","redisClient","createClient","host","port","client","RedisSessions","namespace","defaultTTL","ttl","create","bind","createFromReq","get","getFromReq","save","close","domain","user_id","ip","data","Promise","resolve","reject","app","id","d","err","resp","req","hostname","split","length","Error","user","request","url","token","tokenSrc","header","tokenData","replace","trim","map","key","val","filter","pair","toLowerCase","set","quit"],"mappings":"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","sourcesContent":["import RedisSessions from 'redis-sessions';\r\nimport redis from 'redis';\r\nimport promisifyAll from 'util-promisifyall'\r\n\r\npromisifyAll(redis.RedisClient.prototype);\r\npromisifyAll(redis.Multi.prototype);\r\n\r\nexport default class Session {\r\n    constructor(opts) {\r\n        this.options = opts;\r\n        this.redisClient = redis.createClient({\r\n            host: opts.host,\r\n            port: opts.port || 6379,\r\n        });\r\n        this.client = new RedisSessions({\r\n            host: opts.host,\r\n            port: opts.port || 6379,\r\n            namespace: 'ses'\r\n        });\r\n        this.defaultTTL = opts.ttl || 7200;\r\n        this.create = this.create.bind(this);\r\n        this.createFromReq = this.createFromReq.bind(this);\r\n        this.get = this.get.bind(this);\r\n        this.getFromReq = this.getFromReq.bind(this);\r\n        this.save = this.save.bind(this);\r\n        this.close = this.close.bind(this);\r\n    }\r\n\r\n    create(domain, user_id, ip, data) {\r\n        return new Promise((resolve, reject) => {\r\n            this.client.create({\r\n                    app: domain,\r\n                    id: user_id,\r\n                    ip: ip,\r\n                    ttl: this.defaultTTL,\r\n                    d: data\r\n                },\r\n                function (err, resp) {\r\n                    if (err) reject(err);\r\n                    else {\r\n                        resolve(resp);\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    async createFromReq(req) {\r\n        const domain = req.hostname.split('.').length > 1 ? req.hostname.split('.')[0] : '';\r\n        if (domain === '') throw new Error('Cannot initiate session from invalid domain');\r\n\r\n        return await this.create(domain, req.user.id, req.ip, {request: req.url});\r\n    }\r\n\r\n    get(domain, token) {\r\n        return new Promise((resolve, reject) => {\r\n            this.client.get({app:domain, token}, function (err, resp) {\r\n                if (err) reject(err);\r\n                else {\r\n                    resolve(resp);\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    async getFromReq(req) {\r\n        const domain = req.hostname.split('.').length > 1 ? req.hostname.split('.')[0] : '';\r\n        if (domain === '') throw new Error('Cannot get session from invalid domain');\r\n\r\n        //default implementation to get token from BEARER protocol\r\n        let tokenSrc = req.header(\"Authentication\");\r\n        let tokenData = tokenSrc.replace(/^bearer/i, '').trim().split(',')\r\n            .map((data) => {\r\n                data = data.trim();\r\n                let {key, val} = data.split('=');\r\n                return {key, val};\r\n            })\r\n            .filter((pair) => {\r\n                return (pair.key.toLowerCase() === 'authenticationtoken');\r\n            });\r\n        if (tokenData.length === 0) throw new Error('Cannot find the token from request\\'s header');\r\n\r\n        return await this.get(domain, tokenData[0].val);\r\n    }\r\n\r\n    async save(domain, token, data) {\r\n        return new Promise((resolve, reject) => {\r\n            this.client.set({\r\n                    app: domain,\r\n                    token: token,\r\n                    d: data\r\n                },\r\n                function (err, resp) {\r\n                    if (err) reject(err);\r\n                    else {\r\n                        resolve(resp);\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    async close() {\r\n        this.redisClient.quit();\r\n        this.client.quit();\r\n    }\r\n}"],"file":"Session.js"}