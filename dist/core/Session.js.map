{"version":3,"sources":["../../lib/core/Session.js"],"names":["redis","RedisClient","prototype","Multi","Session","constructor","opts","options","redisClient","createClient","host","port","client","RedisSessions","namespace","defaultTTL","ttl","create","domain","user_id","ip","data","app","id","d","createFromReq","req","hostname","split","length","Error","user","request","url","get","token","getFromReq","tokenSrc","header","tokenData","replace","trim","map","key","val","filter","pair","toLowerCase","save","set"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,+BAAaA,eAAMC,WAAN,CAAkBC,SAA/B;AACA,+BAAaF,eAAMG,KAAN,CAAYD,SAAzB;;AAEe,MAAME,OAAN,CACf;AACIC,cAAYC,IAAZ,EAAiB;AACb,SAAKC,OAAL,GAAeD,IAAf;AACA,SAAKE,WAAL,GAAmBR,eAAMS,YAAN,CAAmB;AAClCC,YAAMJ,KAAKI,IADuB;AAElCC,YAAML,KAAKK,IAAL,IAAa;AAFe,KAAnB,CAAnB;AAIA,SAAKC,MAAL,GAAc,IAAIC,sBAAJ,CAAkB;AAC5BH,YAAMJ,KAAKI,IADiB;AAE5BC,YAAML,KAAKK,IAAL,IAAa,IAFS;AAG5BG,iBAAU;AAHkB,KAAlB,CAAd;AAKA,SAAKC,UAAL,GAAkBT,KAAKU,GAAL,IAAY,IAA9B;AACH;;AAED,QAAMC,MAAN,CAAaC,MAAb,EAAqBC,OAArB,EAA8BC,EAA9B,EAAkCC,IAAlC,EAAuC;AACnC,WAAO,qBAAU,KAAKT,MAAL,CAAYK,MAAtB,EAA8B;AACjCK,WAAKJ,MAD4B;AAEjCK,UAAIJ,OAF6B;AAGjCC,UAAIA,EAH6B;AAIjCJ,WAAK,KAAKD,UAJuB;AAKjCS,SAAGH;AAL8B,KAA9B,CAAP;AAOH;;AAED,QAAMI,aAAN,CAAoBC,GAApB,EAAwB;AACpB,UAAMR,SAASQ,IAAIC,QAAJ,CAAaC,KAAb,CAAmB,GAAnB,EAAwBC,MAAxB,GAAiC,CAAjC,GAAqCH,IAAIC,QAAJ,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAArC,GAAiE,EAAhF;AACA,QAAGV,WAAW,EAAd,EAAkB,MAAM,IAAIY,KAAJ,CAAU,6CAAV,CAAN;AAElB,WAAO,MAAM,KAAKb,MAAL,CAAYC,MAAZ,EAAoBQ,IAAIK,IAAJ,CAASR,EAA7B,EAAiCG,IAAIN,EAArC,EAAyC;AAACY,eAASN,IAAIO;AAAd,KAAzC,CAAb;AACH;;AAED,QAAMC,GAAN,CAAUhB,MAAV,EAAkBiB,KAAlB,EAAwB;AACpB,WAAO,MAAM,qBAAU,KAAKvB,MAAL,CAAYsB,GAAtB,EAA2BhB,MAA3B,EAAmCiB,KAAnC,CAAb;AACH;;AAGD,QAAMC,UAAN,CAAiBV,GAAjB,EACA;AACI,UAAMR,SAASQ,IAAIC,QAAJ,CAAaC,KAAb,CAAmB,GAAnB,EAAwBC,MAAxB,GAAiC,CAAjC,GAAqCH,IAAIC,QAAJ,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAArC,GAAiE,EAAhF;AACA,QAAGV,WAAW,EAAd,EAAkB,MAAM,IAAIY,KAAJ,CAAU,wCAAV,CAAN,CAFtB,CAII;;AACA,QAAIO,WAAWX,IAAIY,MAAJ,CAAW,gBAAX,CAAf;AACA,QAAIC,YAAYF,SAASG,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,EAAiCC,IAAjC,GAAwCb,KAAxC,CAA8C,GAA9C,EACXc,GADW,CACNrB,IAAD,IAAU;AACXA,aAAOA,KAAKoB,IAAL,EAAP;AACA,UAAI;AAACE,WAAD;AAAMC;AAAN,UAAavB,KAAKO,KAAL,CAAW,GAAX,CAAjB;AACA,aAAO;AAACe,WAAD;AAAMC;AAAN,OAAP;AACH,KALW,EAMXC,MANW,CAMHC,IAAD,IAAU;AACd,aAAQA,KAAKH,GAAL,CAASI,WAAT,OAA2B,qBAAnC;AACH,KARW,CAAhB;AASA,QAAGR,UAAUV,MAAV,KAAqB,CAAxB,EAA2B,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AAE3B,WAAO,MAAM,KAAKI,GAAL,CAAShB,MAAT,EAAiBqB,UAAU,CAAV,EAAaK,GAA9B,CAAb;AACH;;AAED,QAAMI,IAAN,CAAW9B,MAAX,EAAmBiB,KAAnB,EAA0Bd,IAA1B,EAA+B;AAC3B,UAAM2B,OAAO,qBAAU,KAAKpC,MAAL,CAAYqC,GAAtB,CAAb;AACA,WAAO,MAAMD,KAAK;AACd1B,WAAKJ,MADS;AAEdiB,aAAOA,KAFO;AAGdX,SAAGH;AAHW,KAAL,CAAb;AAKH;;AAjEL","sourcesContent":["import RedisSessions from 'redis-sessions';\r\nimport redis from 'redis';\r\nimport {promisify} from 'util';\r\nimport promisifyAll from 'util-promisifyall'\r\n\r\npromisifyAll(redis.RedisClient.prototype);\r\npromisifyAll(redis.Multi.prototype);\r\n\r\nexport default class Session\r\n{\r\n    constructor(opts){\r\n        this.options = opts;\r\n        this.redisClient = redis.createClient({\r\n            host: opts.host,\r\n            port: opts.port || 6379,\r\n        });\r\n        this.client = new RedisSessions({\r\n            host: opts.host,\r\n            port: opts.port || 6379,\r\n            namespace:'ses'\r\n        });\r\n        this.defaultTTL = opts.ttl || 7200;\r\n    }\r\n\r\n    async create(domain, user_id, ip, data){\r\n        return promisify(this.client.create)({\r\n            app: domain,\r\n            id: user_id,\r\n            ip: ip,\r\n            ttl: this.defaultTTL,\r\n            d: data\r\n        });\r\n    }\r\n\r\n    async createFromReq(req){\r\n        const domain = req.hostname.split('.').length > 1 ? req.hostname.split('.')[0]: '';\r\n        if(domain === '') throw new Error('Cannot initiate session from invalid domain');\r\n\r\n        return await this.create(domain, req.user.id, req.ip, {request: req.url});\r\n    }\r\n\r\n    async get(domain, token){\r\n        return await promisify(this.client.get)(domain, token);\r\n    }\r\n\r\n\r\n    async getFromReq(req)\r\n    {\r\n        const domain = req.hostname.split('.').length > 1 ? req.hostname.split('.')[0]: '';\r\n        if(domain === '') throw new Error('Cannot get session from invalid domain');\r\n\r\n        //default implementation to get token from BEARER protocol\r\n        let tokenSrc = req.header(\"Authentication\");\r\n        let tokenData = tokenSrc.replace(/^bearer/i, '').trim().split(',')\r\n            .map((data) => {\r\n                data = data.trim();\r\n                let {key, val} = data.split('=');\r\n                return {key, val};\r\n            })\r\n            .filter((pair) => {\r\n                return (pair.key.toLowerCase() === 'authenticationtoken');\r\n            });\r\n        if(tokenData.length === 0) throw new Error('Cannot find the token from request\\'s header');\r\n\r\n        return await this.get(domain, tokenData[0].val);\r\n    }\r\n\r\n    async save(domain, token, data){\r\n        const save = promisify(this.client.set);\r\n        return await save({\r\n            app: domain,\r\n            token: token,\r\n            d: data\r\n        });\r\n    }\r\n}"],"file":"Session.js"}