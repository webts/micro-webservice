{"version":3,"sources":["../../lib/core/Authenticator.js"],"names":["Authenticator","constructor","app","init","self","passport","use","Strategy","token","done","tokenUtil","then","tokenInfo","user","id","hasOwnProperty","user_id","scope","name","message","catch","err","getUser","nameOrEmail","authenticate","req","res","next","session"],"mappings":";;;;;;;AAAA;;AACA;;;;AAGe,MAAMA,aAAN,CAAoB;AAC/BC,cAAYC,GAAZ,EAAiB;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL;AACH;;AAEDA,SAAM;AACF,UAAMC,OAAO,IAAb;AACA,SAAKC,QAAL,GAAgB,kBAASC,GAAT,CACZ,IAAI,4BAAeC,QAAnB,CACI,UAASC,KAAT,EAAgBC,IAAhB,EAAqB;AACjBL,WAAKF,GAAL,CAASQ,SAAT,CAAmB,KAAnB,EAA0B;AAAC,qBAAaF;AAAd,OAA1B,EACKG,IADL,CACWC,SAAD,IACN;AACI,YAAG,CAACA,SAAJ,EAAc;AACV,cAAIC,OAAO;AAACC,gBAAIF,UAAUG,cAAV,CAAyB,SAAzB,IAAsCH,UAAUI,OAAhD,GAA0D;AAA/D,WAAX;AACA,iBAAOP,KAAK,IAAL,EAAWI,IAAX,EAAiB;AAACI,mBAAMb,KAAKF,GAAL,CAASgB;AAAhB,WAAjB,CAAP;AACH,SAHD,MAII;AACA,iBAAOT,KAAK,IAAL,EAAW,KAAX,EAAkB;AAACU,qBAAS;AAAV,WAAlB,CAAP;AACH;AACJ,OAVL,EAWKC,KAXL,CAWYC,GAAD,IAAS;AACZ,eAAOZ,KAAKY,GAAL,CAAP;AACH,OAbL;AAeH,KAjBL,CADY,CAAhB;AAqBH;AAED;;;;;;;;;;AAQAC,UAAQC,WAAR,EAAqB,CAEpB;AAED;;;;;;;;AAMAC,eAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AACzB,WAAO,KAAKtB,QAAL,CAAcmB,YAAd,CAA2B,QAA3B,EAAqC;AAACI,eAAQ;AAAT,KAArC,EAAsDH,GAAtD,EAA2DC,GAA3D,EAAgEC,IAAhE,CAAP;AACH;;AAnD8B","file":"Authenticator.js","sourcesContent":["import passport from 'passport';\r\nimport BearerStrategy from 'passport-http-bearer';\r\n\r\n\r\nexport default class Authenticator {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.init();\r\n    }\r\n\r\n    init(){\r\n        const self = this;\r\n        this.passport = passport.use(\r\n            new BearerStrategy.Strategy(\r\n                function(token, done){\r\n                    self.app.tokenUtil('get', {'authToken': token})\r\n                        .then((tokenInfo) =>\r\n                        {\r\n                            if(!tokenInfo){\r\n                                let user = {id: tokenInfo.hasOwnProperty('user_id') ? tokenInfo.user_id : null};\r\n                                return done(null, user, {scope:self.app.name});\r\n                            }\r\n                            else{\r\n                                return done(null, false, {message: 'Invalid authenticationToken'});\r\n                            }\r\n                        })\r\n                        .catch((err) => {\r\n                            return done(err);\r\n                        })\r\n\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n    /**\r\n     * check if user exists or not\r\n     *\r\n     * @param {string|null} email or username\r\n     * @return {Object|null} user\r\n     * @memberof Authenticator\r\n     * @return User record\r\n     */\r\n    getUser(nameOrEmail) {\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} req\r\n     * @memberof Authenticator\r\n     */\r\n    authenticate(req, res, next) {\r\n        return this.passport.authenticate('bearer', {session:false})(req, res, next);\r\n    }\r\n}"]}