{"version":3,"sources":["../../lib/core/WebAppService.js"],"names":["WebAppService","WebService","constructor","opts","defaults","base","options","path","join","cwd","views","Array","isArray","then","dots","dot","process","server","engine","file","data","callback","name","basename","Error","set"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,aAAN,SAA4BC,mBAA5B,CACf;AACIC,cAAYC,IAAZ,EAAiB;AACb,UAAMA,IAAN;AACH;;AAEDC,aAAU;AACN,UAAMA,QAAN;AACA,UAAMC,OAAO,IAAb;;AAEA,QAAG,WAAW,KAAKC,OAAnB,EACA;AACI,YAAMC,OAAOA,KAAKC,IAAL,CAAU,KAAKC,GAAf,EAAqB,SAArB,CAAb;AACA,UAAIC,QAAQ,CAAC,KAAKJ,OAAL,CAAaI,KAAd,CAAZ;AACA,UAAGC,MAAMC,OAAN,CAAc,KAAKN,OAAL,CAAaI,KAA3B,CAAH,EAAsCA,QAAQ,KAAKJ,OAAL,CAAaI,KAArB;AACtC,wBAAIA,KAAJ,EAAU,QAAV,EAAmB;AAACD,aAAI,KAAKA;AAAV,OAAnB,EACKI,IADL,CACU,MACN;AACIR,aAAKS,IAAL,GAAYC,aAAIC,OAAJ,CAAY;AAACT;AAAD,SAAZ,CAAZ;AACAF,aAAKY,MAAL,CAAYC,MAAZ,CAAmB,KAAnB,EAA0B,CAACC,IAAD,EAAOC,IAAP,EAAaC,QAAb,KAC1B;AACI,gBAAMC,OAAOf,KAAKgB,QAAL,CAAcJ,IAAd,EAAmB,MAAnB,CAAb;;AACA,cAAGG,QAAQjB,KAAKS,IAAhB,EAAqB;AACjBO,qBAAS,IAAT,EAAehB,KAAKS,IAAL,CAAUQ,IAAV,EAAgBF,IAAhB,CAAf;AACH,WAFD,MAGKC,SAAS,IAAIG,KAAJ,CAAU,2BAA2BF,IAArC,CAAT;AACR,SAPD;AAQAjB,aAAKY,MAAL,CAAYQ,GAAZ,CAAgB,OAAhB,EAAyBlB,IAAzB;AACAF,aAAKY,MAAL,CAAYQ,GAAZ,CAAgB,aAAhB,EAA+B,KAA/B;AACH,OAdL;AAiBH;AACJ;;AAhCL","sourcesContent":["import WebService from './WebService';\r\nimport dot from 'dot';\r\nimport path from 'path';\r\nimport cpy from 'cpy';\r\n\r\nexport default class WebAppService extends WebService\r\n{\r\n    constructor(opts){\r\n        super(opts);\r\n    }\r\n\r\n    defaults(){\r\n        super.defaults();\r\n        const base = this;\r\n\r\n        if('views' in this.options)\r\n        {\r\n            const path = path.join(this.cwd , '_views/');\r\n            let views = [this.options.views];\r\n            if(Array.isArray(this.options.views)) views = this.options.views;\r\n            cpy(views,'_views',{cwd:this.cwd})\r\n                .then(() =>\r\n                {\r\n                    base.dots = dot.process({path});\r\n                    base.server.engine('dot', (file, data, callback ) =>\r\n                    {\r\n                        const name = path.basename(file,'.dot');\r\n                        if(name in base.dots){\r\n                            callback(null, base.dots[name](data));\r\n                        }\r\n                        else callback(new Error('Invalid template file ' + name));\r\n                    });\r\n                    base.server.set('views', path);\r\n                    base.server.set('view engine', 'dot');\r\n                });\r\n\r\n\r\n        }\r\n    }\r\n}"],"file":"WebAppService.js"}